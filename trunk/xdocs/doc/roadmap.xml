<?xml version="1.0"?>
<document url="./status.xml">

<!--
// ======================================================================== 78
-->

<properties>
    <title>Roadmap - The Apache Struts Web Application Framework</title>
</properties>

<body>

<chapter href="roadmap" name="Development Roadmap">

<section href="scope" name="Scope">

    <p>
    This document outlines some of changes we expect to
    see in future releases of Struts.
    </p>

    <p>
    This document is provided for discussion purposes only.
    All releases and changes to the codebase are subject to
    <a href="./bylaws.html">a vote</a> of the
    <a href="volunteers.html#pmc">Struts PMC</a>.
    </p>

    <p>
    An outline of the enhancements proposed here can be found on the
    <a href="milestones.html">Milestones</a> page.
    </p>

    </section>

    <section href="Bugzilla" name="Bugzilla Queries">

        <p>
            The Struts development team uses the <a href="http://issues.apache.org/bugzilla">Apache Bug Database</a> (Bugzilla)
            to manage problem reports and enhancement requests.
            For your convenience, here are some common Bugzilla queries:
        </p>

        <ul>
            <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;product=Struts&amp;order=bugs.bug_id">Open reports</a></li>
            <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;email1=&amp;emailtype1=substring&amp;emailassigned_to1=1&amp;email2=&amp;emailtype2=substring&amp;emailreporter2=1&amp;bugidtype=include&amp;bug_id=&amp;changedin=&amp;votes=3&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;product=Struts&amp;short_desc=&amp;short_desc_type=allwordssubstr&amp;long_desc=&amp;long_desc_type=allwordssubstr&amp;bug_file_loc=&amp;bug_file_loc_type=allwordssubstr&amp;keywords=&amp;keywords_type=anywords&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0=&amp;cmdtype=doit&amp;order=Bug+Number">Open reports with at least 3 votes</a></li>
            <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_severity=Blocker&amp;bug_severity=Critical&amp;bug_severity=Major&amp;bug_severity=Normal&amp;bug_severity=Minor&amp;email1=&amp;emailtype1=substring&amp;emailassigned_to1=1&amp;email2=&amp;emailtype2=substring&amp;emailreporter2=1&amp;bugidtype=include&amp;bug_id=&amp;changedin=&amp;votes=&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;product=Struts&amp;short_desc=&amp;short_desc_type=allwordssubstr&amp;long_desc=&amp;long_desc_type=allwordssubstr&amp;bug_file_loc=&amp;bug_file_loc_type=allwordssubstr&amp;keywords=&amp;keywords_type=anywords&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0=&amp;cmdtype=doit&amp;order=bugs.bug_id">Open problem reports</a>
                <ul>
                <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;product=Struts&amp;bug_severity=Blocker&amp;bug_severity=Critical&amp;bug_severity=Major&amp;order=bugs.bug_id">major problem reports</a></li>
                <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;product=Struts&amp;bug_severity=Blocker&amp;bug_severity=Normal&amp;bug_severity=Minor&amp;order=bugs.bug_id">normal/minor problem reports</a></li>
                </ul>
                </li>
            <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;product=Struts&amp;bug_severity=Enhancement&amp;order=Bug+Number">Open enhancement reports</a>
                <ul>
                    <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_severity=Enhancement&amp;email1=&amp;emailtype1=substring&amp;emailassigned_to1=1&amp;email2=&amp;emailtype2=substring&amp;emailreporter2=1&amp;bugidtype=include&amp;bug_id=&amp;changedin=&amp;votes=&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;product=Struts&amp;short_desc=&amp;short_desc_type=allwordssubstr&amp;long_desc=&amp;long_desc_type=allwordssubstr&amp;bug_file_loc=&amp;bug_file_loc_type=allwordssubstr&amp;keywords=PatchAvailable&amp;keywords_type=anywords&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0=&amp;cmdtype=doit&amp;newqueryname=&amp;order=Bug+Number">Patch Available</a></li>
                </ul>
                </li>
            <li><a href="http://issues.apache.org/bugzilla/buglist.cgi?bug_status=RESOLVED&amp;resolution=LATER&amp;resolution=REMIND&amp;product=Struts&amp;order=bugs.bug_id">Reports to be handled "LATER"</a></li>
        </ul>


    </section>

<section href="Struts_1_x" name="Struts 1.x">

    <p>
        Releases in the 1.x series will focus on refactoring of existing functionality, with a
        continued emphasis on backward compatibility.
    </p>
    <p>
        New features are being added to the Struts 1.x series,
        but only if backward compatability with the prior release can be retained.
        The 1.x API is evolving through a deprecate/replace/remove protocol.
        Developers are encouraged to stay current with the "best available" release
        and to observe deprecation warnings.
        Features are deprecated before removal, and deprecated features are ultimately removed.
    </p>

    <p>
        The 1.x series is being refactored into several subprojects, starting with Struts Core. 
        Other subprojects may use Struts Core, and each other, as dependencies, 
        but Struts Core should not depend on any other subproject. 
    </p>

    <p>
        Popular third-party extensions that are in active use by the Struts Community may be considered
        as subprojects, such as those distributed through the
        <a href="http://sourceforge.net/projects/struts">Struts SourceForge</a> site.
        (If you are the author of such an extension, and would like to donate it to Struts and the
        Apache Software Foundation, please contact the dev@ list.)
    </p>

    <p>
        Throughout the 1.x series,
        there will be a continued emphasis on expanding unit test coverage for the framework.
        Bug reports should include a failing test case when possible.
        Proposals for new features should include a working test suite.
        (Creating features through Test Driven Development is strongly encouraged.)
    </p>

    <p>
        Enhancement requests are logged in Bugzilla as they are suggested.
        <strong>The listing of an enhancement in Bugzilla does not imply that is being "planned"</strong>,
        merely that some member of the community has suggested it,
        and the idea hasn't been ruled out (yet).
    </p>

    <p>
        Future release <a href="milestones.html">milestones</a> are provided for enhancements
        which are being actively planned or developed
        but may not be ready for the very next release.
        If a report has not been tagged for a specific milestone by a working developer,
        then <strong>it may never be implemented</strong>.
        When developers (including non-Committers) are actually working on an enhancement,
        they should re-tag it for a specific release milestone, such as "1.3.1" or "1.3.2".
    </p>

    <p>
        If an enhancement has not been tagged for a specific target,
        feel free to start working on it yourself.
        Many of our best features have been contributed by developers,
        just like you.
        If you are working on an enhancement,
        post a note on the ticket that you are working on an enhancement
        and then post a patch as soon as possible.
        If the development effort doesn't succeed,
        post a note to the ticket explaining what problem you had creating the enhancement,
        so that other developers can explore alternatives.
    </p>

    </section>

    <section href="Struts_1_3_x" name="Struts 1.3.x and beyond">

        <p>
            An outline of the Struts 1.x enhancements proposed here can be found on the
            <a href="milestones.html">Milestones</a> page.
        </p>

        <p>
            As planned, in Struts 1.3.x we will integrate Struts Chain from config and add
            an "extends" attribute to all the configuration elements (a la Tiles). While
            we're at it, we may also add a Ant-style properties file to make variable
            substitutions within the XML elements. The substitution feature is supported by 
            Spring and iBATIS, among others, and is a useful way to configure applications 
            and reduce redundancy.
        </p>

        <p>
            <b>Experimental Members</b>
        </p>

        <p>
            Those items by themselves seem like enough for a release, but we might add a
            few "experimental" classes and interfaces to give us a chance to play with
            Struts Chain in our own applications. We came up with two experimental classes
            and an experimental interface: ActionCommand, ActionContext, and ViewContext.
        </p>

        <p>
            <b>ActionCommand</b> - A Chain Command-like interface with one method:
        </p>

        <p><code>void execute(ActionContext context)</code></p>

        <p>
            Support for conventional Actions would stay in place, but as an alternative, a
            class could implement ActionCommand and unbind itself from the HTTP API.
        </p>

        <p>
            <b>ActionContext</b> - A <i>Chain Context</i> that implements the logical Action class API.
        </p>

        <p>
            Existing code could be converted by changing references to context.* and so
            forth. The context could be constructed by the Request Processor, as an optional
            Command in the Chain, so that it could be exposed this through thread-local,
            opening the door for POJO actions that don't implement a particular interface.
        </p>

        <p>
            <b>ViewContext</b> - A <i>Chain Context</i> that implements the logical "Velocity Tools" API.
        </p>

        <p>
            In a later release, we could move the taglib dependencies from the
            servlet contexts to the ViewContext. View technologies could then look
            exclusively to the ViewContext rather than poke around in the various servlet
            contexts. (Of course, support for the original architecture would remain for
            some time, to give third party libraries the chance to migrate.)
        </p>

        <p>
            After having a chance to work with ActionContext and ViewContext ourselves, we
            could introduce more support for these members in a later release. But for 1.3,
            they could be marked "experimental".
        </p>

        <p>
            The Commons Chain WebContext we now pass around Struts Chain could be called the
            "StrutsContext" to differentiate it from the ActionContext and ViewContext.
        </p>

        <p>
            (Are we now starting to call everything "Context" instead of "Action"? Not
            really. We use the "Context" suffix when a member extends Chain Context. This
            convention is unlike the current "Action" soup, since "Context" is a suffix
            that identifies a member's "family" history.)
        </p>

        <p><b>Subproject Distributions</b></p>

        <p>
            Also as planned, we would extract the Taglibs package into its own subproject.
            (Giving us a chance to make the Taglibs 1.0.1 release utilize the ViewContext.)
            We might also consider extracting "Actions" (plural) and "Plugins" into a
            separate "Extras" subproject. While the members here are popular, they are
            optional, and not essential to the core.
        </p>

        <p>
            We've mentioned that each subproject should have its own release cycle. We've
            also mentioned the idea of "bundling" subprojects into a master distribution.
            We might consider taking that idea a step further and utilize the "Linux"
            approach. The Struts "1.3.0" distribution could be an aggregation of "Core
            1.0.x", "Taglibs 1.0.x", and "Extras 1.0.x".
        </p>

        <p>
            Later, if we end up with a Taglibs 1.0.1 GA before there is another Core 1.0.x
            GA, we could assemble a "Struts 1.3.1" distribution that aggregates (for
            example) "Core 1.0.0", "Taglibs 1.0.1", and "Extras 1.0.0".
        </p>

        <p>
            The Struts aggregate distribution doesn't have to be complicated, perhaps just
            a ZIP of whatever subproject GA distributions work with the "best available"
            core.
        </p>

        <p><b>1.4 considerations</b></p>

        <p>
            One we get past 1.3.x, there are some other things that we might consider.
        </p>

        <p>
            <b>Consider combining DTDs.</b> Right now, using "standard" extensions like Tiles and
            Validator mean using more than one configuration file. While using multiple
            configurations files can be a good thing, we should also try and support the
            idea of having a single configuration file. This might not work-out for Tiles,
            but we might be able to at least integrate the Validator configuration with the
            DynaForm configuration.
        </p>

        <p>
            <b>Consider adding catalog element.</b> Depending on how the work goes with the
            experimental ActionCommand interface, we might identifiy a need to add a
            catalog element to the Struts configuration, to support using a Chain of
            ActionCommands.
        </p>

        <p>
            <b>Consider refactoring for Spring.</b> We identified the need for adding a IOC
            container to Struts some time ago, but stalled on the point of which to use.
            Since then, Spring has gained a lot of momentum. Spring is used by the MyFaces
            and Beehive teams, and its on the radar for Shale. There is already a
            Struts-Spring component in the Spring distribution and other common ground.
       </p>

        <p><b>1.5 considerations</b></p>

        <p>
            Based on our own work with the "experimental" members introduced in 1.3.x, we
            might consider some other changes.
        </p>

        <p>
            <b>Consider a "smart" action type.</b> The idea is that a command in Struts chain
            could look at the type indicated by the ActionMapping so both Action classes
            and ActionCommand implementations are supported. People could then
            mix-and-match Actions with ActionCommands (or even chains of ActionCommands).
            We might even support placing an ActionCommand interface on ActionForm, so
            people could skip having a seperate Action or ActionCommand class. The ActionForm
            could do it all.
        </p>

        <p>
            <b>Consider a "populate" method on ActionForm.</b> From an OOP standpoint, it might be
            cleaner if an ActionForm populated itself rather than rely on an "god" class to
            populate it from the outside.
        </p>

        <p>
            <b>Consider a "FormContext" mechanism.</b> Rather than "throw-away" a request-based
            ActionForm, the object could be seralized as a hidden-field or session-object
            and restored on the next request. Many other frameworks support this behavior
            now. Struts would have a slightly different spin, since we look at the form as
            an named entity rather than as an anonymous aggregation of other objects.
        </p>

        <p><b>1.6 considerations</b></p>

        <p>
            <b>Consider multiple controllers.</b> One reason we introduced modules was because
            "there can only be one" Struts controller in an application. With the
            context-based changes we making, we might be able to introduce a mechanism to
            support a collection of Struts controllers, each identified by its servlet or
            filter name, each with it's own URI pattern. The key to being able to do
            something like this is for view members to look to the ViewContext rather than
            the various servlet contexts. Each Struts controller would place the
            appropriate ViewContext in its own requests.
        </p>

        <p>
            <b>Consider an alternate configuration file.</b> There are idiosyncrasies in the
            element/attribute names of the struts-config which often confuse new
            developers. By either supporting alternative configuration loaders, or applying
            a stylesheet to a XML configuration, we could support both the "classic" and a
            new configuration.
        </p>
    </section>

    <section href="Struts_2_0" name="Struts 2.0.x">

    <p>
    Struts 2.x (aka Struts "Next Generation") will include broader enhancements.
    We anticipate that the implementation will utilize the Servlet 2.4 / JSP 2.0
    platform, and perhaps Java 1.5, but may optionally support earlier platforms.
    </p>

    <p>
    We anticipate that Struts 2.x would rely on JSTL and the JavaServer Faces
    API as supporting technologies.
    However, the focus of the Struts framework will remain on the Controller
    aspect of a Model 2/MVC architecture.
    The core framework will continue to be both Model and View independent.
    </p>

    <p>
    Development of Struts 2.x would include taking a completely fresh look at
    the internal architecture.
    The goal for 2.x would be to incorporate everything we've learned in the past
    years of Struts usage, and create something even better.
    Development will follow current best practices, like Test Driven Development,
    and rely on technologies like Maven for project management.
    </p>

    <p>
    Of course, it is anticipated that the Struts team would continue to support
    the 1.x codebase for a long time with bugfixes and incremental enhancements.
    (Mainly because many of us will still be using it on our production sites!)
    Accordingly, it is anticipated that the development of the 2.x and 1.x
    series would occur in tandem.
    At some point, 2.x milestones may appear alongside new 1.x releases.
    </p>

    <p>
    As Struts 1.x evolves, some (or all) target features may overlap.
    Target features for Struts 2.x include:
    </p>

    <ul>

        <li>
        Comprehensive unit test coverage for all core features
        </li>

        <li>
        Enhanced support for using Struts in large team environments.
        </li>

        <li>
        Transparent support for a portlet environment (JSR 168), with
        minimal-to-no changes in your business logic and pages.
        </li>

        <li>
        Direct support for JSTL/JSF taglibs and the JSF API
        </li>

        <li>
        Enhanced support for other presentation layers, such as XLST
        </li>

        <li>
        Enhanced support for scriptable Actions, using technologies like BSF or Jelly
        </li>

        <li>
        Refactoring for new technologies available on the Servlet 2.4/ JSP 2.0 platform
        </li>

    </ul>

    <p>
      An early proposal for one possible implementation of Struts 2.x, "Struts Jericho",
       is available through the <a href="http://wiki.apache.org/struts/StrutsJericho">wiki</a>.
    </p>

     <p>
        A second proposal for Struts 2.x, "Struts Shale", has accepted as a subproject
        instead. See the <a href="http://wiki.apache.org/struts/StrutsShale">wiki.</a> for more.
     </p>

      <p>
        Proposals aside, it is quite possible that Struts 1.x will simply evolve into
        what people envision as Struts 2.x. Should that happen, and each release is backwardly 
        compatible with the prior release, it would not be necessary to increment the major version 
        number at all. Instead of Struts 2.x, we may yet see Struts 1.64 :)
       </p>

</section>

<section href="Portlets" name="Portlet (JSR-168) Whiteboard">
    <p>
        There are three major issues with supporting JSR-168 (and I'm sure a bunch of smaller ones as well):
    </p>

    <ul>

        <li>
            Struts APIs assume servlet API objects (ServletContext, ServletRequest, ServletResponse), whereas JSR-168
            talks about PortletContext, PortletRequest, and PortletResponse.
            We'd either need to change the calling sequence for Action.execute() -- problematic for backwards
            compatibility -- or fake it somehow in a portlet environment.
        </li>

        <li>
            The lifecycle of a portlet request is actually divided into two chunks -- processing and then rendering.
            From a Struts perspective, that means making sure that the first part of the request processor pipeline
            need to happen in the "process" part, and the forwarding to the resulting page needs to happen in the
            "render" part.
        </li>

        <li>
            Today, Struts owns the process of calculating URLs for pages and actions.
            Because it's in a webapp, it knows exactly what to do for the developer.
            However, in a portlet container it's actually the portal server that manages URLs, so a Struts-based
            portlet would need to interact with the portlet APIs for this purpose.
        </li>

    </ul>

    <p>
        A strong goal should be that a Struts application should be usable either as a webapp or as a portlet, with
        little (ideally no) changes.
        Therefore, we should build whatever it takes to support this into the standard Struts distribution, which would
        then be used in both environments.
    </p>

</section>

    <section href="jsf" name="JavaServer Faces">

        <p>
            Struts is providing support for <a href="http://java.sun.com/j2ee/javaserverfaces/">JavaServer Faces</a>
            through the Struts Faces Integration Library. The Struts Faces tablib allows developers to migrate
            pages to JSF but retain use of their Actions. Pages can be migrated on a one-by-one basis. The
            Struts Faces taglib is still under development, and a 1.0.x release is forthcoming.
        </p>
        <p>
           As JSF comes into broader use, it is expected that
           Struts developers will continue to offer enhancements to make it even easier to use Struts with JSF,
           such as the <a href="http://wiki.apache.org/struts/StrutsShale">Struts Shale</a> proposal.
        </p>

        <p>
            The <a href="http://incubator.apache.org/myfaces/">MyFaces team</a> is in the process of joining the Apache Software Founcation. Once the Apache MyFaces team has access to the Apache TCK, it
            is expected to be recognized as a certified JSF implementation.
        </p>

        <p>
            For more about Struts and JavaServer faces, see:
       </p>

        <ul>
            <li>Craig McClanahan's <a href="http://blogs.sun.com/roller/page/craigmcc/20040927">blog entry</a></li>
            <li>Our <a href="faqs/kickstart.html#jsf">FAQ</a></li>
            <li><a href="http://www.jamesholmes.com/JavaServerFaces/">Java Server Faces Resources at JamesHolmes.com</a></li>
         </ul>
    </section>

<section href="Proposals" name="Relevant Proposals">

    <ul>

        <li>
        <a href="http://cvs.apache.org/viewcvs/jakarta-commons-sandbox/chain/">Commons Chain of Responsiblity
        package</a>
        </li>

        <li>
        <a href="http://cvs.apache.org/viewcvs/jakarta-struts/contrib/struts-chain/">CoRe Request Processor</a>
        </li>


        <li>
        <a href="http://wiki.apache.org/struts/StrutsRelease126">Release Plan 1.2.6</a>
        </li>

        <li>
        <a href="proposals/struts-faces.html">struts-faces taglib</a>
        </li>

		    <li>
		    <a href="http://wiki.apache.org/struts/StrutsJericho">Struts Jericho</a>
		    </li>
		    
		    
		    <li>
		    <a href="http://wiki.apache.org/struts/StrutsShale">Struts Shale</a>
       </li>
       
       <li>
		    <a href="http://wiki.apache.org/struts/StrutsOverDrive">Struts OverDrive</a>
		   </li>
       
    </ul>

</section>

    <section>
      <p class="right">Next:
      <a href="http://svn.apache.org/viewcvs.cgi/struts/?root=Apache-SVN">Source Repository</a></p>
    </section>

<section>
    <p class="version">Website updated from repository: 2005 APR 13 by husted.</p>
    <p class="version">Javadocs updated from repository: 2004 OCT 23 by husted.</p>
</section>
</chapter>
</body></document>
