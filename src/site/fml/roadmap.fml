<?xml version="1.0"?>
<!--
Copyright 1999-2005 The Apache Software Foundation
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!--
// ======================================================================== 78
-->
<faqs title="Roadmap FAQ">
    <!--<title>Roadmap FAQ</title>-->

    <part id="general">
        <faq id="ti">
            <question>What about Ti? What about WebWork?</question>
            <answer>
                <p>
                    <a href="http://wiki.apache.org/struts/StrutsTi">Struts
                        Ti</a>
                    (short for Titanium) was a codename for Struts 2.0.
                    In late November 2005, the Ti proposal was amended to
                    include a merger with
                    <a href="http://www.opensymphony.com/webwork/">Open
                        Symphony WebWork.</a>
                    Pursuant to this plan, WebWork 2.3 was
                    donated to the ASF in March 2006,
                    and the active WebWork committers joined the Apache Struts project.
                    The WebWork 2.3 codebase is being brought into the ASF through
                    the
                    <a href="http://incubator.apache.org/projects/webwork2.html">
                        Apache Incubator.</a>
                    Once licensing and related issues are resolved,
                    the codebase will be made part of the Apache Struts
                    project.
                </p>
                <p>
                    WebWork started as a
                    <a href="http://incubator.apache.org/learn/rules-for-revolutionaries.html">
                        Struts Revolution.</a>
                    Over the years, it has evolved into a superb action-based
                    framework that retains many Struts 1.x paradigms.
                </p>
                <p>
                    People who have worked with both Struts 1.x and WebWork
                    2.x tend to agree that it is a logical candidate for
                    Struts 2.0.
                    If you look the Struts 1.x roadmap and the WebWork
                    2.x feature set,
                    you'll see that WebWork has already does most of what we
                    wanted Struts framework to do.
                    If we finished the roadmap ourselves, Struts would
                    end up as a WebWork workalike.
                    Rather than reinvent the wheel,
                    Ti has become a proposal to put the WebWork wheel back on
                    the Struts axle.
                </p>
                <p>
                    At this point, the Ti codename has being dropped,
                    and we are referring to the incoming WebWork codebase as Struts
                    2.
                </p>
            </answer>
        </faq>

        <faq id="roots">
            <question>If they share the same roots,
            why did WebWork evolve more quickly than Struts 1?</question>
            <answer>
            <p>
              The Struts 1.x series is deeply into "backward compatibility" mode.
              Backward compatibility is an obsession with Struts 1.
              Before making any API change, we deprecate the existing member,
              and make at least one milestone release before removing the deprecated member.
              Each Struts milestone is drop-and-go compatible with the last.
              Maintaining this degree of stability takes a lot of effort,
              but given the installed base, we feel it is worth the time and trouble.
            </p>
            <p>
              There have been several proposals for a new Struts 2 codebase.
              The first formal proposal was
              <a href="http://wiki.apache.org/struts/StrutsJericho">Jericho,</a>
              followed by
              <a href="http://wiki.apache.org/struts/StrutsShale">Shale,</a>
              and then
              <a href="http://wiki.apache.org/struts/StrutsTi">Ti.</a>
            </p>
            <p>
              Jericho never progressed past the trial balloon stage.
              Shale is based on JavaServer Faces, and, when the time came,
              the Apache Struts PMC found that many of us were not ready to
              adopt JSF just yet.
              Shale was a separate but equal framework,
              created and maintained by the Apache Struts community,
              but later moved to its own <a href="http://struts.apache.org/struts-shale">Struts Shale</a>
              project.
           </p>
           <p>
               The Ti proposal included the idea of collaborating with other
               projects to build a "best of breed" framework that incorporated
               everything we had learned over the past five years.
               The original Ti proposal includes technology developed by
               <a href="http://beehive.apache.org/">Apache BeeHive,</a>
               <a href="http://www.springframework.org/">Spring,</a> and
               <a href="http://www.opensymphony.com/webwork/">OpenSympony WebWork.</a>
           </p>
           <p>
                In the course of developing the initial Ti codebase,
                the WebWork developers offered to "join forces" with
                the Apache Struts developers,
                so that we could work more closely together.
           </p>
           <p>
                Out of these collaborations,
                the <a href="http://struts.apache.org/announce.html#a20051214.3">
                Apache Struts/OpenSymphony WebWork</a> merger arose.
           </p>
            </answer>
        </faq>
        
        <faq id="xwork">
            <question>What about other Open Symphony products, like
                XWork?</question>
            <answer>

                <p>
                    For the time being, there is no plan to migrate XWork to
                    the ASF. Struts has always had many dependencies on
                    external
                    packages. So long as packages like XWork and SiteMesh are doing
                    well at OpenSymphony, there is no reason to make further changes.
                </p>
            </answer>
        </faq>

        <faq id="migrate">
            <question>Will it be difficult to migration from Struts 1 to
                Struts 2?</question>
            <answer>
                <p>
                    Many of us have significant Struts 1.x
                    applications in production.
                    Being able to migrate both applications and developer
                    skill sets is important to all of us.
                </p>
                <p>
                    Several
                    <a href="http://wiki.apache.org/struts/MigrationStrategy">
                        migration strategies</a>
                    are being developed.
                </p>
            </answer>
        </faq>

        <faq id="obsolete">
          <question>Is Struts 1 obsolete?</question>
          <answer>
            <p>
            	There is a robust and vibrant community of developers using Struts 1 
            	in production, and we expect that thousands of teams will continue to base new 
            	projects on Struts 1 and support existing projects, for many, many years 
            	to come. 
            </p>
            <p>
            	New and improved extensions to Struts 1 continue to appear regularly. 
            	In <strong>2006 alone</strong>, we've seen the release of 
            	
            	<a href="http://strecks.sourceforge.net/">Strecks,</a>
            	<a href="http://www.jspcontrols.net">JSP Control Tags,</a>
            	<a href="http://mojodna.net/sprout/">Sprout,</a>
            	<a href="http://www.springframework.org/node/239">Spring Web Flow,</a>
            	<a href="http://getahead.ltd.uk/dwr/">DWR,</a>
            	<a href="http://calyxo.org/">Calyxo,</a>
            	<a href="https://formdef.dev.java.net/">FormDef,</a> and
            	<a href="http://javawebparts.sourceforge.net/">Java Web Parts</a>.            	

            	There are <a href="http://opensource.atlassian.com/confluence/oss/display/BOOKS/Books+about+Struts">dozens of books</a> and 
            	<a href="http://www.husted.com/central/Resources/Action/articles-2006.html">hundreds of articles</a> available 
            	to help people get started with Struts 1 or improve the application they already have.
            </p>
            <p>
            	A new build of <a href="http://svn.apache.org/dist/struts/action-lib/">Struts 1.3 is available for testing</a>, 
            	and a stable release is expected sometime in the first half of 2006.
            	Apache Struts 1 continues to be the most popular and best supported 
            	web application framework for Java.
		If time is of the essence, a proven solution can be easiest path.            	
            </p>
            
            <p>
               If you are starting a new project, and have your choice of frameworks, 
               this would be a good time to consider whether you would like to continue to use 
               Struts 1 or <a href="#choice">whether it's time to try something else</a>. 
	    </p>            
          </answer>          
         </faq>

        <faq id="choice">
            <question>Which Apache Struts version should I use on my next
                project?</question>

            <answer>
                <p>
                    First, you should decide which user interface technology you
                    would like to use:
                    <a href="http://java.sun.com/j2ee/javaserverfaces/">JavaServer
                        Faces</a>
                    (JSF),
                    conventional
                    <a href="http://java.sun.com/products/jsp/">JavaServer Pages</a>
                    (JSP),
                    or another templating technology like
                    <a href="http://jakarta.apache.org/velocity/">Velocity</a>
                    .
                </p>
                <p>
                    JSF is designed to work well with visual design tools, much
                    like ASP.NET. Some people are finding that JSF is a faster way to
                    write new applications. A good place to learn more about JSF is
                    <a href="http://jsfcentral.com/">JSF Central</a>
                    .
                </p>
                <p>
                    Conventional JSP is a tried and true strategy.
                    When used as part of a MVC architecture, applications based on
                    server pages or templates are known to be easy to create,
                    maintain, and extend over time.
                </p>
                <p>
                    If you are a sole developer working on a small application,
                    then you might not even need a framework.
                    Simple applications can be written with JSF or JSP with
                    <a href="http://java.sun.com/products/jsp/jstl/index.jsp">
                        JSTL</a>
                    "out of the box."
                    (If you choose JSF, be sure to give
                    <a href="http://developers.sun.com/prodtech/javatools/jscreator/">
                        Java Studio Creator</a>
                    a try.)
                </p>
                <p>
                    Multi-developer teams working on larger applications will
                    probably find a MVC framework useful.  While both Struts 1 and 2
                    support JSP, Struts 2.0 has support for JSF and enhanced support
                    for template languages like Velocity or Freemarker. 
                    Struts 1.x has a ton of books, articles, and other resources, so it is
                    the better choice if you need support materials.
                </p>
                <p>
                    Aside from Apache Struts products, 
                    other likely candidates for a Java Web MVC framework include
                    <a href="http://cocoon.apache.org/">Apache Cocoon,</a>
                    <a href="http://jakarta.apache.org/tapestry/">Apache Tapestry,</a>
                    <a href="http://jakarta.apache.org/turbine/">Apache Turbine,</a>
                    <a href="http://www.springframework.org/docs/reference/mvc.html">Spring MVC,</a>
                    <a href="http://stripes.mc4j.org/confluence/display/stripes/Home">Stripes,</a>
                    and
                    <a href="http://wicket.sourceforge.net/">Wicket.</a>
                </p>
                <p>
                   If you are using Java 5 as a development platform, 
                   then you might want to consider 
                   <a href="http://strecks.sourceforge.net/">Strecks,</a> 
		   a set of Java 5 extensions for Struts 1.2.
                </p>
            </answer>
        </faq>

        <faq id="decisions">
            <question>So many decisions! Shouldn't it be simpler?</question>
            <answer>
                <p>
                    Yes, there seems to be nothing but choice when it comes to
                    developing web applications.
                </p>

                <p>
                    To begin with, someone has to choose between ASPX, Java, PHP,
                    Python, Ruby, et al.
                    Once you choose Java, then you have to choose a web container,
                    such as Jetty, Tomcat, Resin, WebLogic, or WebSphere, to name a
                    few.
                    Of course, you also have to build the application that runs in
                    the container, which is where
                    <a href="#choice">choosing Apache Struts</a>
                    comes in. Then, most teams also use a data access framework.
                    Choices there include Cayenne, iBATIS, Hibernate,  JDO, Turbine, 
                    and OJB, to name a few.
                </p>

                <p>
                    (Right about now, Ruby's single-stack approach must be sounding
                    pretty good!)
                </p>

                <p>
                    But, wait, there's more! You also have to choose an editor or
                    IDE: Eclipse? IDEA? NetBeans? UltraEdit? Some other?
                    (Many teams decide to use more than one!)
                    And do we use Ant, Maven, or the IDE to build it all?
                </p>

                <p>
                    Lest we forget: Someone also needs to choose a database system
                    (DB2? Derby? Oracle? PostGres? MySQL?), a version control system
                    (CVS? Subversion? Perforce?),
                    a development methodology (eXtreme Programming? RUP? Scrum?
                    Waterfall?),
                    and, if you're lucky, an issue tracker (Bugzilla? JIRA? Scarab?).
                </p>
                <p>
                    Welcome to the jungle!
                </p>
            </answer>
        </faq>

        <faq id="steering">
            <question>Shouldn't the Apache Struts team focus on a single version
                and help reduce choice for the rest of us?</question>
            <answer>
                <p>
                    Apache Struts is neither a steering committee nor a vendor. We're
                    a group of engineers creating the web application frameworks that
                    we want to use to build our own applications. Some of us are
                    working on legacy Struts 1 applications, some of us are working on
                    WebWork 2 or Struts 2 applications, and some of us are working on both. Since we have
                    volunteers to work on two versions, we offer two
                    versions.</p>

                <p>The Struts committers work for different employers all over
                    the world. It is not feasible for us to say this technology or
                    that technology is the only technology anyone in our group can
                    use.
                    One of our employers might choose JSF, and another might stick
                    with JSP. We are a working group of engineers who live in the
                    real world, and we are faced with all the same choices every Java
                    engineer faces today.
                </p>
                <p>
                    Entities like Microsoft, and Sun, and Zend, exist to promote one
                    technology over another (mainly to make it easier for them to
                    sell you something)
                    The Apache Struts team is not trying to sell you anything.
                    We're collaborating on the frameworks that we want to use, and
                    we are trying to share the wealth with others who might want to
                    help us.
                    If you choose to use one of our versions, that's great. We're
                    glad we could help. If you'd like to help us make the versions
                    even better, feel free to return the favor. We don't want your
                    money, but
                    <a href="helping.html">we could use your help.</a>
                </p>
            </answer>
        </faq>

            <faq id="subprojects">
                <question>Why are there so many "extensions" for Struts 1 now?</question>
                <answer>
                    <p>
                        Over the years, the Struts 1 framework grew to include not only a
                        controller and a set of taglibs but several other comonents,
                        like Tiles, EL, Scripting, and Flow. There were also some
                        optional classes that some people liked, but not everyone needed
                        (like DispatchAction).
                    </p>
                    
                    <p>
                        For the Struts 1.3.0 build, we tried creating separate 
                        distributions for the various packages that make up
                        Struts. 
                        Creating the separate distributions created problems of its own, 
                        so for the Struts 1.3.1 build, and beyond, 
                        we are consolidating the extensions back into a single 
                        Struts 1.3 distribution. Each component has its own                     </p>
			JAR but all share the same release cycle.
                </answer>
            </faq>


            <faq id="classic">
                <question>Is Struts Classic another name for the Struts?
                </question>
                <answer>
                    <p>Struts Classic is a codename for the work we needed to do to
                        create and release the seven components we extracted from
                        Struts 1.2. It is not a product per-se, but shorthand for the
                        1.3.0 build of the seven components. The term is obsolete.                     </p>
                </answer>
            </faq>

            <faq id="overdrive">
                <question>What about OverDrive or Struts Nexus?</question>
                <answer>
                    <p>
                        <a href="http://wiki.apache.org/struts/StrutsOverDrive">
                            OverDrive</a>
                        is a working proposal to use a set of case-study
                        applications to drive the design and creation of a
                        business layer framework.
                        The codename for the business layer framework under
                        development is "Nexus".
                        Like Struts 1.3 and Shale, the Nexus internals are based
                        on the Chain of Responsibility pattern.
                    </p>
                    <p>
                        OverDrive and Nexus do not complete with frameworks like
                        Struts 1.3 and Struts 2.
                        Nexus begins where these frameworks end.
                        Nexus is the "rest of the stack".
                    </p>
                    <p>
                        The codebase underlying the proposal is being coded in C#,
                        but a version for Java is expected in due course.
                    </p>
                </answer>
            </faq>

    </part>

    <!--
    <part>
        <p class="right">
            <strong>Next:</strong>
            <a href="helping.html">How to Help FAQ</a>
        </p>
    </part>
    -->

</faqs>
