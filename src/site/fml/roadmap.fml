<?xml version="1.0"?>
<!--
Copyright 1999-2005 The Apache Software Foundation
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!--
// ======================================================================== 78
-->
<faqs title="Roadmap FAQ">

    <part id="general">
        <faq id="ti">
            <question>What about Ti? What about WebWork?</question>
            <answer>
                <p>
                    <a href="http://wiki.apache.org/struts/StrutsTi">Struts
                        Ti</a>
                    (short for Titanium) was a codename for Struts 2.
                    In late November 2005, the Ti proposal was amended to
                    include a merger with
                    <a href="http://www.opensymphony.com/webwork/">Open
                        Symphony WebWork.</a>
                    Pursuant to this plan, WebWork 2.2 was
                    donated to the ASF in March 2006,
                    and the active WebWork committers joined the Apache Struts Project.
                    The WebWork codebase was brought into the ASF through
                    the
                    <a href="http://incubator.apache.org/projects/webwork2.html">
                        Apache Incubator.</a>
                    The donated codebase is now part of the Apache Struts 
                    Project.
                </p>
                <p>
                    WebWork started as a
                    <a href="http://incubator.apache.org/learn/rules-for-revolutionaries.html">
                        Struts Revolution.</a>
                    Over the years, it has evolved into a superb action-based
                    framework that retains many Struts 1 paradigms.
                </p>
                <p>
                    People who have worked with both Struts 1 and WebWork
                    2 tend to agree that it is a logical candidate for
                    Struts 2.
                    If you looked at the Struts 1 roadmap and the WebWork
                    2 feature set,
                    you'd see that WebWork has already does most of what we
                    had wanted the Struts framework to do.
                    If we had finished the original Struts 1 roadmap as written, 
                    Struts 1 would have ended up being a WebWork 2 workalike.
                    Rather than reinvent the wheel,
                    Ti became a proposal to put the WebWork wheel back on
                    the Struts axle.
                </p>
                <p>
                    At this point, the Ti codename has been dropped,
                    and we are referring to the donated codebase as Struts 2.
                </p>
            </answer>
        </faq>

        <faq id="roots">
            <question>If they share the same roots,
            why did WebWork evolve more quickly than Struts 1?</question>
            <answer>
                <p>
                    The Struts 1.x release series is deeply into "backward 
                    compatibility" mode. In fact, 
                    backward compatibility has become an obsession with Struts 1.
                    Before making any API change, we deprecate the existing member,
                    and make at least one milestone release before removing the 
                    deprecated member.
                    Each Struts milestone is drop-and-go compatible with the last.
                    Maintaining this degree of stability takes a lot of effort,
                    but given the installed base, we feel it is worth the time and 
                    trouble.
                </p>
                <p>
                  There were several proposals for a new Struts 2 codebase.
                  The first formal proposal was
                  <a href="http://wiki.apache.org/struts/StrutsJericho">Jericho,</a>
                  followed by
                  <a href="http://wiki.apache.org/struts/StrutsShale">Shale,</a>
                  and then
                  <a href="http://wiki.apache.org/struts/StrutsTi">Ti.</a>
                </p>
                <p>
                  Jericho never progressed past the trial balloon stage.
                  Shale is based on JavaServer Faces, and, when the time came,
                  the Apache Struts PMC found that many of us were not ready to
                  adopt JSF just yet.
                  Initially, Shale was a Struts subproject,
                  but later Shale graduated to its own 
                  <a href="http://struts.apache.org/struts-shale">top-level ASF 
                  project.</a>
               </p>
               <p>
                   The Ti proposal includes the idea of collaborating with other
                   projects to build a "best of breed" framework that incorporates
                   everything we have learned over the past six years.
                   The original Ti proposal included technology developed by
                   <a href="http://beehive.apache.org/">Apache BeeHive,</a>
                   <a href="http://www.springframework.org/">Spring,</a> and
                   <a href="http://www.opensymphony.com/webwork/">OpenSympony WebWork.</a>
                   In the course of co-developing the initial Ti codebase,
                   the WebWork team offered to "join forces" with
                   the Apache Struts group,
                   so that we could work more closely together.
                   Out of these collaborations,
                   the <a href="http://struts.apache.org/announce.html#a20051214.3">
                   Apache Struts/OpenSymphony WebWork</a> merger arose.
               </p>
            </answer>
        </faq>
        
        <faq id="xwork">
            <question>What about other Open Symphony products, like
                XWork?</question>
            <answer>

                <p>
                    For the time being, there is no plan to migrate XWork to
                    to the ASF. 
                    Struts has always had many dependencies on external 
                    packages. 
                    So long as projects like XWork and SiteMesh are doing  
                    well at OpenSymphony, there is no reason to change venues.
                    Of course, if another OpenSymphony project were ready to 
                    join the ASF, our door is open.
                </p>
            </answer>
        </faq>

        <faq id="choice">
            <question>What should I use with my next project?</question>

            <answer>
                <p>
                    First, if you are a sole developer working on a small application,
                    <strong>you might not even need a framework.</strong>
                    Simple applications can be written with JSF or JSP with
                    <a href="http://java.sun.com/products/jsp/jstl/index.jsp">
                        JSTL</a>
                    "out of the box."
                    (If you choose JSF, be sure to give
                    <a href="http://developers.sun.com/prodtech/javatools/jscreator/">
                        Java Studio Creator</a>
                    a try.)
                </p>
                <p>
                    Multi-developer teams working on larger applications will
                    probably find a MVC framework useful.  
                </p>
                <p>
                    When choosing a framework, two key considerations are 
                    which user interface technology and which version of Java 
                    you would like to use.
                    Popular user interface technologies include 
                    <a href="http://java.sun.com/j2ee/javaserverfaces/">JavaServer
                        Faces</a>
                    (JSF), conventional
                    <a href="http://java.sun.com/products/jsp/">JavaServer Pages</a>
                    (JSP),
                    and templating technologies like
                    <a href="http://jakarta.apache.org/velocity/">Velocity.</a>
                    Another popular UI technology to consider is 
                    <a href="http://www.adaptivepath.com/publications/essays/archives/000385.php">
                    AJAX.</a>
                </p>
                <p>
                    (For more about the technologies underlying modern web 
                    applications, see the 
                    <a href="../primer.html">
                        Key Technologies</a> primer.)
                </p>
                <p>
                    While both Struts 1 and 2 support JSP, Velocity, and XSLT, 
                    Struts 2 has better support for JSF and first-class support
                    for template engines like Velocity and 
                    <a href="http://www.freemarker.org/">FreeMarker,</a>
                    and, optionally, 
                    <a href="http://www.jaspersoft.com/">JasperReports.</a>
                </p>
                <p>
                    Both versions work well with AJAX, but Struts 2 includes an 
                    AJAX theme that can give your interactive pages a boost.
                    Under the name WebWork, Struts 2 already powers many large 
                    enterprise-grade solutions, including 
                    <a href="http://www.atlassian.com/">Atlassian's</a> 
                    JIRA and Confluence applications.
                </p>                 
                <p>
                    On the JVM front, Struts 2 is targeted for Java 5, but  
                    provides backward compatibility for Java 4.
                    Struts 1 is targeted for Java 4. 
                    (Struts 1 developers using Java 5 might want to consider 
                    <a href="http://strecks.sourceforge.net/">Strecks,</a> 
                    a set of Java 5 extensions for Struts 1.2.)
                </p>
                <p>
                    If you would like to use JSF exclusively, 
                    then <a href="http://shale.apache.org/">
                        Apache Shale</a> 
                    might be a good choice.
                    Originally a Struts subproject, 
                    Shale is now a top-level ASF project.
                </p>
            </answer>
        </faq>
        
        <faq id="new">
        <question>What's changed in Struts 2?</question>
           <answer>
               <p>
                  Struts 2 is designed to be simpler to use and closer to how 
                  Struts was always meant to be. 
                  To Struts 1 developers, 
                  Struts 2 feels strange but familiar. 
                  Some key changes from Struts 1 are:
               </p>


                <ul>
                    <li>Smarter!
                        <ul><li>
                        <strong>Improved design</strong> - All Struts 2 classes are based on interfaces. Core interfaces are HTTP independant.
                        </li><li>
                        <strong>Intelligent Defaults</strong> - Most configuration elements have a default value that you can set and forget.
                        </li><li>
                        <strong>Enhanced Results</strong> - Unlike ActionForwards, Struts 2 Results can actually help prepare the response.
                        </li><li>
                        <strong>First-class AJAX support</strong> - The AJAX theme gives your interactive applications a boost.
                        </li><li>
                        <strong>Stateful Checkboxes</strong> - Struts 2 checkboxes do not require special handling for false values.                        
                        </li><li>                        
                        <strong>QuickStart</strong> - Many changes can be made on the fly without restarting a web container.
                        </li></ul></li>
                     <li>Easier!
                        <ul><li>
                        <strong>Easy-to-test Actions</strong> - Struts 2 Actions are HTTP independant and can be tested without resorting to mocks.
                        </li><li>
                        <strong>Easy-to-customize controller</strong> - Struts 1 lets you customize the request processor per module, Struts 2 lets you customize the request handling per action, if you like.
                        </li><li>
                        <strong>Easy-to-customize tags</strong> - Struts 2 tags can be customized by changing an underlying stylesheet. Individual tags can be customized by editing a FreeMarker template. No need to grok the taglib API! Both JSP and FreeMarker tags are fully supported.
                        </li><li>
                        <strong>Easy cancel handling</strong> - The Struts 2 Cancel button can go directly to a different action.
                        </li><li>
                        <strong>Easy Spring integration</strong> - Struts 2 Actions are Spring-aware. Just add your own Spring beans!
                        </li><li>
                        <strong>Easy Plugins</strong> - Struts 2 extensions can be added by dropping in a JAR. No manual configuration required!
                        </li></ul></li>
                     <li>POJO-ier!
                        <ul><li>
                        <strong>POJO forms</strong> - No more ActionForms! Use any JavaBean you like or put properties directly on your Action. No need to use all String properties!
                        </li><li>
                        <strong>POJO Actions</strong> - Any class can be used as an Action class. You don't even have to implement an interface!
                        </li></ul>
                        </li>
                 </ul>
            </answer>
        </faq>

           <faq id="now">
            <question>If I'm starting a new project right now, 
            should I use Struts 2 or WebWork 2?</question>
            <answer>
                <p>
                    A beta release of Struts 2 is now available, and
                    a stable release is anticipated by the end of the year.
                    In the meantime,
                    unless you are an eager early-adopter, 
                    the prudent course would be to start new projects with 
                    <a href="http://www.opensymphony.com/webwork/">
                    WebWork 2.2,</a> 
                    at least until there is a stable release of Struts 2.0.
                </p>
                <p>
                    WebWork 2 is going to be supported for some time to come, 
                    just as Struts 1 will be supported. 
                    Both products have a robust user community, 
                    and many of us have mature projects in production 
                    that will never be migrated to a new major release. 
                </p>
            </answer>
        </faq>
                
        <faq id="migrate_ww">
            <question>Will it be difficult to migrate from WebWork 2 to
                Struts 2?</question>
            <answer>
                <p>
                    No. 
                </p>
                <p>
                    Essentially, Struts 2.0 will be the technical 
                    equivalent of WebWork 2.3.
                    Aside from the package and property renaming, 
                    it shouldn't be much different than, say, migrating 
                    from WebWork 2.1 to 2.2. 
                </p>
            </answer>
        </faq>
        
        <faq id="obsolete">
            <question>Is Struts 1 obsolete?</question>
            <answer>
                <p>
                     No.
                </p>
                <p>
                    There is a robust and vibrant community of developers using 
                    Struts 1 in production, and we expect that thousands of teams 
                    will continue to base new projects on Struts 1, and continue 
                    to support existing projects, for many, many years to come. 
                </p>
                <p>
                    New and improved extensions for Struts 1 continue to appear 
                    regularly. 
                    In <strong>2006 alone</strong>, we've seen releases of 

                    <a href="http://www.sundog.net/index.php/hoople/page/struts/">Hoople,</a>
                    <a href="http://strecks.sourceforge.net/">Strecks,</a>
                    <a href="http://www.jspcontrols.net">JSP Control Tags,</a>
                    <a href="http://mojodna.net/sprout/">Sprout,</a>
                    <a href="http://www.springframework.org/node/239">Spring Web Flow,</a>
                    <a href="http://getahead.ltd.uk/dwr/">DWR,</a>
                    <a href="http://calyxo.org/">Calyxo,</a>
                    <a href="https://formdef.dev.java.net/">FormDef,</a> and
                    <a href="http://javawebparts.sourceforge.net/">Java Web Parts</a>.              

                    There are 
                    <a href="http://opensource.atlassian.com/confluence/oss/display/BOOKS/Books+about+Struts">
                    dozens of books</a> and 
                    <a href="http://www.StrutsCentral.net/Resources/Struts1/articles-2006.html">
                    hundreds of articles</a> available to help people get started with 
                    Struts 1 or improve the application they already have.
                </p>
                <p>
                    Since the merger, Struts 1 has gone on to release a new minor 
                    version, Struts 1.3, 
                    and new 1.x releases are being planned.
                    Struts 1 continues to be the most popular and best supported 
                    web application framework for Java.
                </p>

                <p>
                   Of course, if you are starting a new project, and have your 
                   choice of frameworks, 
                   this might be a good time to consider whether you would like to 
                   continue to use Struts 1 or
                   whether it's time to try Struts 2. 
                </p>            
            </answer>          
         </faq>

        <faq id="migrate_s1">
            <question>Will it be difficult to migrate from Struts 1 to
                Struts 2?</question>
            <answer>
                <p>
                    Many of us have significant Struts 1 
                    applications in production.
                    Being able to migrate both applications and developer
                    skill sets is important to all of us.
                    The Struts 2 documentation includes a Migration Guide 
                    that outlines several migration strategies. 
                    Several classic Struts example applications, 
                    including the MailReader, 
                    are being migrated to Struts 2. 
                </p>
            </answer>
        </faq>

        <faq id="subprojects">
            <question>Why are there so many "components" for Struts 1 now?</question>
            <answer>
                <p>
                    Over the years, the Struts 1 framework grew to include not only a
                    controller and a set of taglibs but several other comonents,
                    like EL, Faces, Taglib, and Scripting. There were also some
                    optional classes that some people like, but not everyone needs
                    (like DispatchAction).
                </p>

                <p>
                    For the Struts 1.3.0 build, we tried creating separate 
                    distributions for the various packages that make up
                    Struts. 
                    Creating the separate distributions created problems of its own, 
                    so for the Struts 1.3.1 build, and beyond, 
                    we are consolidating the extensions back into a single 
                    Struts 1.3 distribution. Each component has its own 
                    JAR but all share the same release cycle.
                </p>
             </answer>
        </faq>

        <faq id="classic">
            <question>Is Struts Classic another name for Struts 1?
            </question>
            <answer>
                <p>
                    Struts Classic is a codename for the work we needed to do to
                    create and release the seven components we extracted from
                    Struts 1.2. It is not a product per-se, but shorthand for the
                    1.3.0 build of the seven components. 
                 </p>
            </answer>
        </faq>

        <faq id="overdrive">
            <question>What about OverDrive or Struts Nexus?</question>
            <answer>
                <p>
                    <a href="http://wiki.apache.org/struts/StrutsOverDrive">
                        OverDrive</a>
                    is a working proposal to use a set of case-study
                    applications to drive the design and creation of a
                    business layer framework.
                    The codename for the business layer framework under
                    development is "Nexus".
                    Like Struts 1.3 and Apache Shale, the Nexus internals are based
                    on the Chain of Responsibility pattern.
                </p>
                <p>
                    OverDrive and Nexus do not complete with frameworks like
                    Struts.
                    Nexus begins where most presentation-layer frameworks end.
                    Nexus is the "rest of the stack".
                </p>
                <p>
                    The codebase underlying the proposal is being coded in C#,
                    but a version for Java is expected in due course.
                </p>
            </answer>
        </faq>

    </part>

    <!--
    <part>
        <p class="right">
            <strong>Next:</strong>
            <a href="helping.html">How to Help FAQ</a>
        </p>
    </part>
    -->

</faqs>
